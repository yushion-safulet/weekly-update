// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/iost-official/go-iost/v3/core/blockcache (interfaces: BlockCache)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	block "github.com/iost-official/go-iost/v3/core/block"
	blockcache "github.com/iost-official/go-iost/v3/core/blockcache"
	reflect "reflect"
)

// MockBlockCache is a mock of BlockCache interface
type MockBlockCache struct {
	ctrl     *gomock.Controller
	recorder *MockBlockCacheMockRecorder
}

// MockBlockCacheMockRecorder is the mock recorder for MockBlockCache
type MockBlockCacheMockRecorder struct {
	mock *MockBlockCache
}

// NewMockBlockCache creates a new mock instance
func NewMockBlockCache(ctrl *gomock.Controller) *MockBlockCache {
	mock := &MockBlockCache{ctrl: ctrl}
	mock.recorder = &MockBlockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockCache) EXPECT() *MockBlockCacheMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockBlockCache) Add(arg0 *block.Block) *blockcache.BlockCacheNode {
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(*blockcache.BlockCacheNode)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockBlockCacheMockRecorder) Add(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBlockCache)(nil).Add), arg0)
}

// AddGenesis mocks base method
func (m *MockBlockCache) AddGenesis(arg0 *block.Block) {
	m.ctrl.Call(m, "AddGenesis", arg0)
}

// AddGenesis indicates an expected call of AddGenesis
func (mr *MockBlockCacheMockRecorder) AddGenesis(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGenesis", reflect.TypeOf((*MockBlockCache)(nil).AddGenesis), arg0)
}

// AddNodeToWAL mocks base method
func (m *MockBlockCache) AddNodeToWAL(arg0 *blockcache.BlockCacheNode) {
	m.ctrl.Call(m, "AddNodeToWAL", arg0)
}

// AddNodeToWAL indicates an expected call of AddNodeToWAL
func (mr *MockBlockCacheMockRecorder) AddNodeToWAL(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNodeToWAL", reflect.TypeOf((*MockBlockCache)(nil).AddNodeToWAL), arg0)
}

// Del mocks base method
func (m *MockBlockCache) Del(arg0 *blockcache.BlockCacheNode) {
	m.ctrl.Call(m, "Del", arg0)
}

// Del indicates an expected call of Del
func (mr *MockBlockCacheMockRecorder) Del(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockBlockCache)(nil).Del), arg0)
}

// Draw mocks base method
func (m *MockBlockCache) Draw() string {
	ret := m.ctrl.Call(m, "Draw")
	ret0, _ := ret[0].(string)
	return ret0
}

// Draw indicates an expected call of Draw
func (mr *MockBlockCacheMockRecorder) Draw() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Draw", reflect.TypeOf((*MockBlockCache)(nil).Draw))
}

// GetBlockByHash mocks base method
func (m *MockBlockCache) GetBlockByHash(arg0 []byte) (*block.Block, error) {
	ret := m.ctrl.Call(m, "GetBlockByHash", arg0)
	ret0, _ := ret[0].(*block.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockBlockCacheMockRecorder) GetBlockByHash(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBlockCache)(nil).GetBlockByHash), arg0)
}

// GetBlockByNumber mocks base method
func (m *MockBlockCache) GetBlockByNumber(arg0 int64) (*block.Block, error) {
	ret := m.ctrl.Call(m, "GetBlockByNumber", arg0)
	ret0, _ := ret[0].(*block.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber
func (mr *MockBlockCacheMockRecorder) GetBlockByNumber(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockBlockCache)(nil).GetBlockByNumber), arg0)
}

// Head mocks base method
func (m *MockBlockCache) Head() *blockcache.BlockCacheNode {
	ret := m.ctrl.Call(m, "Head")
	ret0, _ := ret[0].(*blockcache.BlockCacheNode)
	return ret0
}

// Head indicates an expected call of Head
func (mr *MockBlockCacheMockRecorder) Head() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockBlockCache)(nil).Head))
}

// Link mocks base method
func (m *MockBlockCache) Link(arg0 *blockcache.BlockCacheNode) {
	m.ctrl.Call(m, "Link", arg0)
}

// Link indicates an expected call of Link
func (mr *MockBlockCacheMockRecorder) Link(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Link", reflect.TypeOf((*MockBlockCache)(nil).Link), arg0)
}

// LinkedRoot mocks base method
func (m *MockBlockCache) LinkedRoot() *blockcache.BlockCacheNode {
	ret := m.ctrl.Call(m, "LinkedRoot")
	ret0, _ := ret[0].(*blockcache.BlockCacheNode)
	return ret0
}

// LinkedRoot indicates an expected call of LinkedRoot
func (mr *MockBlockCacheMockRecorder) LinkedRoot() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkedRoot", reflect.TypeOf((*MockBlockCache)(nil).LinkedRoot))
}

// Recover mocks base method
func (m *MockBlockCache) Recover(arg0 blockcache.ConAlgo) error {
	ret := m.ctrl.Call(m, "Recover", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Recover indicates an expected call of Recover
func (mr *MockBlockCacheMockRecorder) Recover(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recover", reflect.TypeOf((*MockBlockCache)(nil).Recover), arg0)
}

// UpdateLib mocks base method
func (m *MockBlockCache) UpdateLib(arg0 *blockcache.BlockCacheNode) {
	m.ctrl.Call(m, "UpdateLib", arg0)
}

// UpdateLib indicates an expected call of UpdateLib
func (mr *MockBlockCacheMockRecorder) UpdateLib(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLib", reflect.TypeOf((*MockBlockCache)(nil).UpdateLib), arg0)
}
